#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../../lib', __FILE__)
require 'yaml'
require 'compile_extensions'
require 'digest'
require 'fileutils'

original_url      = ARGV[0]
install_directory = ARGV[1]

def debug(msg)
  STDERR.puts(msg) if ENV['BP_DEBUG']
end

debug "DEBUG: download '#{original_url}' to '#{install_directory}'"

file_location     = File.join(install_directory, original_url.split('/').last)
manifest_location = File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "manifest.yml"))
cache_path        = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', 'dependencies'))
manifest          = YAML.load_file(manifest_location)
dependencies      = CompileExtensions::Dependencies.new(manifest)
translated_uri    = dependencies.find_translated_url(original_url)
dependency_md5    = dependencies.find_md5(original_url)

debug "DEBUG: translated_uri '#{translated_uri}'"
debug "DEBUG: dependency_md5 '#{dependency_md5}'"

if translated_uri.nil?
  STDERR.puts "Dependency not found in MANIFEST file: '#{original_url}'"
  puts "Buildpack will attempt to download: '#{original_url}'"
  tmp1 = original_url.gsub(/.tar/, '-ubuntu14.04\\0')
  tmp2 = original_url.split(/.tar/).first
  translated_uri = "https://swift.org/builds/development/ubuntu1404/#{tmp2}/#{tmp1}"
  debug "DEBUG: Using the following URL for attempting to download dependency: #{translated_uri}"
  #https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-06-06-a/swift-DEVELOPMENT-SNAPSHOT-2016-06-06-a-ubuntu14.04.tar.gz
  #orig_string = "swift-DEVELOPMENT-SNAPSHOT-2016-06-06-a.tar.gz"
  #end_result = orig_string.gsub(/.tar/, '-ubuntu14.04\\0')
  #print end_result
  #"swift-DEVELOPMENT-SNAPSHOT-2016-06-06-a.tar.gz".split(/.tar/).first
  #exit 1
end

if File.exist? cache_path
  file_path = File.join(ogs_path, translated_uri.gsub(/[\/:]/, '_'))
  # Let's check that the dependency is actually found in the dependencies folder
  # If not found in the dependencies folder, we will not change the value of translated_uri and we will attempt to download it
  if File.exist? file_path
    debug "DEBUG: Dependency found: '#{file_path}'"
    translated_uri = "file://#{file_path}"
  end
end

`curl -s #{translated_uri} -o #{file_location}`
generated_md5 = Digest::MD5.file(file_location).hexdigest

debug "DEBUG: generated_md5 '#{generated_md5}'"
puts file_location

unless dependency_md5.nil?
  if dependency_md5 == generated_md5
    exit 0
  else
    FileUtils.rm(file_location)
    exit 3
  end
end
